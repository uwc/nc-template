// ==== LIBRARY ==== //

/* Mixins, functions, and other non-declarative things */

/*
 * 1. Settings
 * 2. Typography
 * 3. Media Queries
 * 4. Layout
 */


// 1. Settings //

/* 
 * Small helper function to convert pixels to rems.
 * IMPORTANT: it enables the use of different base fontsizes with differen breakpoints. 
 */
@function rem($pixels, $context: $base-fontsize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}

/* 
 * A simple function to retrieve a color from the palette.
 * Adapted from http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/ 
 */
@function palette($palette, $tone: 'base') {
    @return map-get(map-get($_palettes, $palette), $tone);
}

/* Master config function */
@function config($map, $key) {
  @return map-get($map, $key);
}

/* A simple function to retrieve theme metadata */
@function metadata($request) {
  @return config($_metadata, $request);
}

/* A simple function to retrieve font sizes */
@function fontsize($request) {
  @return config($_fontsize, $request);
}


// 2. Typography //

/* 
 * The font() function accepts a style parameter. *
 * It is intended to promote consistency in the typography, 
 * therefore the number of styles should be kept to a minimum.
 * Attributes which change between instances should not be defined here (e.g. color). 
 */
@mixin font($style: null) {
  @if $style == null {
    @warn "Mixin font() received no input! Please provide a style.";
    font-weight: $sans-normal;
    font-size: fontsize(regular);
    color: red;
  }
  @else if $style == 'title1' {
    font-weight: $sans-bold;
    font-size: fontsize(xxx-large);
  }
  @else if $style == 'title2' {
    font-weight: $sans-bold;
    font-size: fontsize(xx-large);
  }
  @else if $style == 'title3' {
    font-weight: $sans-bold;
    font-size: fontsize(x-large);
  }
  @else if $style == 'lead' {
    font-weight: $sans-normal;
    font-size: fontsize(large);
  }
  @else if $style == 'body' {
    font-weight: $sans-normal;
    font-size: fontsize(regular);
  }
  @else if $style == 'button' {
    font-weight: $sans-normal;
    font-size: fontsize(small);
  }
  @else if $style == 'navigation' {
    font-weight: $sans-normal;
    font-size: fontsize(small);
  }
  @else {
    @warn "Mixin font() received invalid input! This style does not exist.";
    font-weight: $sans-normal;
    font-size: fontsize(regular);
    color: red;
  }
}


// 3. MEDIA QUERIES //

/* 
 * Master media query mixin; only for use with screens, of course
 * should work with raw integers or em values. 
 */
@mixin media($min-query: null, $max-query: null) {
  @if $min-query == null and $max-query == null {
    @warn "Mixin media() received two null values; no output.";
    @content; // Pass content anyway, but it won't be wrapped in a media query
  }
  @else if $max-query == null {
    @media screen and (min-width: $min-query+0em) { @content; }
  }
  @else if $min-query == null {
    @media screen and (max-width: $max-query+0em) { @content; }
  }
  @else {
    @media screen and (min-width: $min-query+0em) and (max-width: $max-query+0em) { @content; }
  }
}


// 4. LAYOUT //

/* Margins and paddings helper function. */
@function space($val: 1) {
  @return rem($space) * rem($val) + 0rem;
}





/*.ctnr-wide, .ctnr-golden {
  width: 100%;
  max-width: 85rem;
  padding-right: 2rem;
  padding-left: 2rem;
  margin: 0 auto;
}

@media (min-width: $phone) {
  .ctnr-wide {
    padding-right: 4rem;
    padding-left: 4rem;
  }

  .ctnr-golden {
    width: 61.8%;
    padding: 0;
    max-width: 50rem;
  }
}*/
