// ==== LIBRARY ==== //

/* Mixins, functions, and other non-declarative things */

/*
 * 1. Settings
 * 2. Gradients
 * 3. Borders & Underlines
 * 4. Typography
 * 5. Layout
 */


// 1. Settings //

/* 
 * A simple function to retrieve a color from the palette.
 * Adapted from http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/ 
 */
@function palette($palette, $tone: 'base') {
    @return map-get(map-get($_palettes, $palette), $tone);
}

/* A simple function to retrieve theme metadata */
@function metadata($request) {
  @return map-get($_metadata, $request);
}



// 2. Gradients //

@function gradient($direction, $color-stops...) {
  @return linear-gradient($direction, $color-stops);
}



// 3. Borders & Underlines //

$border-gray: 1px solid palette(gray, lighter);
$border-grey: 1px solid palette(gray, lighter);

@mixin gradient-border($direction, $color-stops...) {
  position: relative;
  &:after {
    content: "";
    display: block;
    background-color: nth($color-stops, 1);
    background-image: gradient($direction, $color-stops);
    width: 100%;
    height: 2px;
  }
}

@mixin gradient-underline($direction, $color-stops...) {
  position: relative;
  z-index: 1;
  &:after {
    content: "";
    position: absolute;
    width: 100%;
    height: 2px;
    bottom: 0;
    left: 0;
    z-index: -1;
    background-color: nth($color-stops, 1);
    background-image: gradient($direction, $color-stops);
    visibility: hidden;
    transform: translate(0px,3px);
    opacity: 0;
    backface-visibility: hidden;
    transition: visibility .15s ease-in-out, opacity .15s ease-in-out, transform .15s ease-in-out;
  }
  &:hover:after,
  &:focus:after {
    visibility: visible;
    opacity: 1;
    transform: translate(0px,1px);
  }
}



// 4. Typography //

/* 
 * The font() function accepts a style parameter.
 * It is intended to promote consistency in the typography, 
 * therefore the number of styles should be kept to a minimum.
 * Attributes which change between instances should not be defined here (e.g. color). 
 */
@mixin font($style: null) {
  @if $style == null {
    @warn "Mixin font() received no input! Please provide a style.";
    font-size: ms(10);
    color: red;
  }
  @else if $style == 'title' {
    font-weight: $sans-bold;
    font-size: ms(6);
  }
  @else if $style == 'header1' {
    font-weight: $sans-bold;
    font-size: ms(5);
  }
  @else if $style == 'header2' {
    font-weight: $sans-bold;
    font-size: ms(4);
  }
  @else if $style == 'header3' {
    font-weight: $sans-bold;
    font-size: ms(3);
  }
  @else if $style == 'large' {
    font-size: ms(1);
    font-weight: $sans-medium;
  }
  @else if $style == 'body' {
    font-size: ms(0);
  }
  @else if $style == 'button' {
    font-weight: $sans-bold;
    font-size: ms(-1);
  }
  @else if $style == 'navigation' {
    font-size: ms(0);
    color: palette(gray);
    font-weight: $sans-medium;
  }
  @else {
    @warn "Mixin font() received invalid input! This style does not exist.";
    font-size: ms(10);
    color: red;
  }
}



// 5. LAYOUT //

/* Simple mixin to clear floats. */
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

/**
 * Content can take on two different widths on mobile:
 * full and wide (golden = wide).
 */
@mixin ctnr-full {
  width: 100vw;
  max-width: 100%;
}

@mixin ctnr-wide {
  width: auto;
  margin-right: vr(0.75);
  margin-left: vr(0.75);
  @include mappy-query(desktop) {
    max-width: 1150px;
    margin-right: auto;
    margin-left: auto;
    padding-right: vr(0.75);
    padding-left: vr(0.75);
  }
}

@mixin ctnr-golden {
  width: auto;
  margin-right: vr(0.75);
  margin-left: vr(0.75);
  @include mappy-query(desktop) {
    max-width: 720px;
    margin-right: auto;
    margin-left: auto;
  }
}
